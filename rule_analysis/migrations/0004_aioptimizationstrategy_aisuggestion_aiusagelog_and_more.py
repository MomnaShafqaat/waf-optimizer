# Generated by Django 5.2.7 on 2025-10-22 17:58

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rule_analysis', '0003_performancesnapshot_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIOptimizationStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority_actions', models.JSONField(help_text='High-priority actions sorted by impact')),
                ('rule_merging_plan', models.JSONField(help_text='Specific rules to merge and approach')),
                ('removal_candidates', models.JSONField(help_text='Rules that can be safely removed')),
                ('performance_improvements', models.JSONField(help_text='Expected performance gains')),
                ('security_considerations', models.JSONField(help_text='Security risks to watch for')),
                ('implementation_priority', models.JSONField(help_text='Priority levels for each action')),
                ('total_optimizations_suggested', models.IntegerField(default=0)),
                ('estimated_performance_gain', models.FloatField(default=0.0)),
                ('estimated_security_impact', models.CharField(choices=[('IMPROVED', 'Improved'), ('NEUTRAL', 'Neutral'), ('REDUCED', 'Reduced')], default='NEUTRAL', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'AI Optimization Strategies',
                'db_table': 'ai_optimization_strategies',
            },
        ),
        migrations.CreateModel(
            name='AISuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_a', models.CharField(max_length=50)),
                ('rule_b', models.CharField(max_length=50)),
                ('relationship_type', models.CharField(choices=[('SHD', 'Shadowing - Rule A shadows Rule B'), ('GEN', 'Generalization - Rule A is more general than Rule B'), ('RXD', 'Redundancy X - Rules trigger on identical patterns'), ('RYD', 'Redundancy Y - Rules are functionally equivalent'), ('COR', 'Correlation - Rules frequently trigger together')], max_length=3)),
                ('action', models.CharField(choices=[('MERGE', 'Merge rules'), ('REMOVE_RULE_A', 'Remove Rule A'), ('REMOVE_RULE_B', 'Remove Rule B'), ('KEEP_BOTH', 'Keep both rules'), ('REVIEW', 'Manual review needed'), ('REORDER', 'Reorder rules')], max_length=20)),
                ('optimized_rule', models.TextField(help_text='AI-generated optimized rule code')),
                ('explanation', models.TextField(help_text='AI explanation for the suggestion')),
                ('security_impact', models.TextField(help_text='Impact on security')),
                ('performance_improvement', models.CharField(help_text='Expected performance gain', max_length=100)),
                ('implementation_steps', models.JSONField(help_text='Step-by-step implementation guide')),
                ('confidence_score', models.FloatField(default=0.0)),
                ('is_applied', models.BooleanField(default=False)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_suggestions',
            },
        ),
        migrations.CreateModel(
            name='AIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=100)),
                ('prompt_tokens', models.IntegerField(default=0)),
                ('completion_tokens', models.IntegerField(default=0)),
                ('total_tokens', models.IntegerField(default=0)),
                ('response_time', models.FloatField(default=0.0)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('cost_estimate', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ai_usage_logs',
            },
        ),
        migrations.RemoveField(
            model_name='performancesnapshot',
            name='average_hit_count',
        ),
        migrations.AddField(
            model_name='performancesnapshot',
            name='ai_optimization_opportunities',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='performancesnapshot',
            name='estimated_ai_improvement',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='ruleanalysissession',
            name='ai_available',
            field=models.BooleanField(default=False, help_text='Whether AI suggestions were available'),
        ),
        migrations.AddField(
            model_name='ruleanalysissession',
            name='ai_error',
            field=models.TextField(blank=True, help_text='Any AI processing errors', null=True),
        ),
        migrations.AddField(
            model_name='ruleanalysissession',
            name='ai_processed',
            field=models.BooleanField(default=False, help_text='Whether AI processing was attempted'),
        ),
        migrations.AddField(
            model_name='ruleanalysissession',
            name='results',
            field=models.JSONField(blank=True, help_text='Complete analysis results with AI suggestions', null=True),
        ),
        migrations.AddField(
            model_name='ruleperformance',
            name='ai_optimization_suggested',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='ruleperformance',
            name='ai_optimization_type',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='ruleperformance',
            name='last_ai_analysis',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='rulerankingsession',
            name='ai_confidence',
            field=models.FloatField(default=0.0, help_text='AI confidence in the ranking'),
        ),
        migrations.AddField(
            model_name='rulerankingsession',
            name='ai_generated',
            field=models.BooleanField(default=False, help_text='Whether ranking was AI-generated'),
        ),
        migrations.AddField(
            model_name='rulerankingsession',
            name='ai_optimization_rationale',
            field=models.JSONField(blank=True, help_text='AI explanation for the ranking', null=True),
        ),
        migrations.AddField(
            model_name='rulerelationship',
            name='ai_action',
            field=models.CharField(blank=True, help_text='AI recommended action', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='rulerelationship',
            name='ai_explanation',
            field=models.TextField(blank=True, help_text='AI explanation for the suggestion', null=True),
        ),
        migrations.AddField(
            model_name='rulerelationship',
            name='ai_optimized_rule',
            field=models.TextField(blank=True, help_text='AI suggested optimized rule', null=True),
        ),
        migrations.AddField(
            model_name='rulerelationship',
            name='ai_suggestion',
            field=models.JSONField(blank=True, help_text='AI optimization suggestion', null=True),
        ),
        migrations.AddIndex(
            model_name='ruleperformance',
            index=models.Index(fields=['ai_optimization_suggested'], name='rule_perfor_ai_opti_b0c1b4_idx'),
        ),
        migrations.AddField(
            model_name='aioptimizationstrategy',
            name='session',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_strategy', to='rule_analysis.ruleanalysissession'),
        ),
        migrations.AddField(
            model_name='aisuggestion',
            name='relationship',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rule_analysis.rulerelationship'),
        ),
        migrations.AddField(
            model_name='aisuggestion',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_suggestions', to='rule_analysis.ruleanalysissession'),
        ),
        migrations.AddField(
            model_name='aiusagelog',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rule_analysis.ruleanalysissession'),
        ),
        migrations.AddIndex(
            model_name='aisuggestion',
            index=models.Index(fields=['session', 'relationship_type'], name='ai_suggesti_session_0a8af4_idx'),
        ),
        migrations.AddIndex(
            model_name='aisuggestion',
            index=models.Index(fields=['action'], name='ai_suggesti_action_9a8764_idx'),
        ),
        migrations.AddIndex(
            model_name='aisuggestion',
            index=models.Index(fields=['is_applied'], name='ai_suggesti_is_appl_a81f4e_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['created_at'], name='ai_usage_lo_created_2b4cf6_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['endpoint'], name='ai_usage_lo_endpoin_23f4c7_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['success'], name='ai_usage_lo_success_53bc5a_idx'),
        ),
    ]
